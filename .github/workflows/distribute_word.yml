name: CI_CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # - name: Run linting
      #   run: |
      #     pip install flake8
      #     flake8 . --max-line-length=88 --extend-ignore=E203
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      - name: Build Docker image
        run: docker-compose build
      - name: Deploy to Render
        if: github.ref == 'refs/heads/main'  # Only on main
        run: |
          echo "Deploying via GitHub Actions CD process, not Render auto-hook"
          curl -v --max-time 30 -X POST https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" || { echo "CD deployment failed with exit code: $?"; exit 1; }
          sleep 60  # Wait 1 minute for deploy to start
          echo "Deployment request accepted, check Render logs for completion"
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
  test:
    runs-on: ubuntu-latest
    needs: build  # Optional: Run after build job
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Match build job
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest  # Ensure pytest is installed
      - name: Set test environment variables
        run: |
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "DEEPSEEK_API_KEY=dummy_test_key" >> $GITHUB_ENV
      - name: Run tests
        run: |
          pytest test_app.py -v
        env:
          REDIS_URL: ${{ env.REDIS_URL }}
          DEEPSEEK_API_KEY: ${{ env.DEEPSEEK_API_KEY }}